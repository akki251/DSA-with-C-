ROTATE ARRAY by 1
BEST APPROACH USING 2 POINTER 


int main()
{
    int a[] = {1, 2, 3, 4, 5};
    int n = sizeof(a) / sizeof(a[0]);

    int i = 0;
    int j = n - 1;

    while (i != j)
    {
        swapInt(&a[i], &a[j]);
        i++;
    }

    for (i = 0; i < n; i++)
    {
        cout << a[i] << " ";
    }
}

///////////////////////// RECURSIVE APPROACH 
void rotateArray(int a[], int n)
{
    if (n == 0)
        return;

    rotateArray(a + 1, n - 1);

    int temp = a[0];
    a[0] = a[1];
    a[1] = temp;
}
int main()
{
    int a[] = {1, 2, 3, 4, 5};
    int n = sizeof(a) / sizeof(a[0]);

    int i = 0;
    
    rotateArray(a, n);

    for (i = 0; i < n; i++)
    {
        cout << a[i] << " ";
    }
}
