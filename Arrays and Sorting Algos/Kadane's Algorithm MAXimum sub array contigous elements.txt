https://www.youtube.com/watch?v=6PxU4rfnf4Q

Kadane Algorithm


int main()
{
    int a[] = {-2, -3, 4, -1, -2, 1, 5, -3};

    int n = sizeof(a) / sizeof(a[0]);
    int i;
    int current = 0;
    int maxSum = INT32_MIN;
    for (i = 0; i < n; i++)
    {

        current += a[i];

        maxSum = max(current, maxSum);

        if (current < 0)
            current = 0;
    }

    cout << maxSum;
}



// Length of max subarray 
  int a[] = {-13, -2,  12, 5};
    int n = sizeof(a) / sizeof(a[0]);
    int length = INT16_MIN;
    int sum = INT16_MIN;
    int currentSum = 0;
    int si = 0;
    int ei = 0;
    int s = 0;
    int i;

    for (i = 0; i < n; i++)
    {
        currentSum = currentSum + a[i];

        if (currentSum > sum)
        {
            sum = currentSum;
            si = s;
            ei = i;
        }

        if (currentSum < 0)
        {

            s = i + 1;
            currentSum = 0;
        }
    }

    cout << sum << endl;
    cout << si << ei;




