Row Wave Form 

2D ARRAY:




 Row Wave Form
Difficulty: EASY
Avg. time to solve
15 min
Success Rate
80%
Problem Statement
You are given a 2D array with dimensions ‘N*M’. You need to read the array elements row-wise and return a linear array that stores the elements like a wave i.e the 1st-row elements are stored from left to right, 2nd-row elements are stored from right to left, and so on.
Input Format:

The first line of input contains an integer 'T' representing the number of the test cases. Then ‘T' test cases follow.

The first line of each test case contains two space-separated integers, 'N', 'M', the dimensions of the 2D array. 

The next ‘N’ lines consist of ‘M’ space-separated integers denoting the array elements.

Output Format:

For each test case, return a 1D array storing the input array elements like a wave.

Note:

You do not need to print anything; it has already been taken care of. Just implement the given function.

Constraints:

1 <= ‘T’ <= 10
1 <= 'N', ‘M’ <= 10^3
1 <= ‘ARR[i][j]’ <= 10^5

Where ARR[i][j] is the array element in the ith row of the jth column.

Time limit: 1 second

Sample Input 1:

2
2 2 
1 2
0 5
2 3
5 1 2
7 0 1

Sample Output 1:

1 2 5 0
5 1 2 1 0 7

Explanation of Input 1:

For test case 1, the array is traversed as:
The first row is traversed from left to right. -> [1, 2]
The second row is traversed from right to left. -> [5, 0]
Therefore the final answer is [1, 2, 5, 0].

For test case 2, the array is traversed as:
First row is traversed from left to right. -> [5, 1, 2]
Second row is traversed from right to left. -> [1, 0, 7]
Therefore the final answer is [5, 1, 2, 1, 0, 7]

Sample Input 2:

1
3 3
0 1 1
8 0 9
5 4 1

Sample Output 2

0 1 1 9 0 8 5 4 1

Explanation of Input 1:

For test case 1, the array is traversed as:
The first row is traversed from left to right. -> [0, 1, 1]
The second row is traversed from right to left. -> [9, 0, 8]
The third row is traversed from left to right -> [5, 4, 1]
Therefore the final answer is [0, 1, 1, 9, 0, 8, 5, 4, 1]



// SOLUION : 



int main()
{
    int m, n;
    cin >> m >> n;

    int a[m][n];
    int i, j;

    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            cin >> a[i][j];
        }
    }

    int b[m * n];
    int p = 0;
    for (i = 0; i < m; i++)
    {

        if (i % 2 == 0)
        {

            for (j = 0; j < n; j++)
            {

                b[p] = a[i][j];
                p++;
            }
        }
        else
        {

            for (j = n - 1; j >= 0; j--)
            {

                b[p] = a[i][j];
                p++;
            }
        }
    }

    for (i = 0; i < m * n; i++)
    {
        cout << b[i] << " ";
    }
}


