Longest Consecutive Subsequence


int removeDuplicates(int a[], int n)
{
    int i;
    int j = 0;
    int temp[n];

    for (i = 0; i <= n - 2; i++)
    {
        if (a[i] != a[i + 1])
        {
            temp[j] = a[i];
            j++;
        }
    }

    temp[j] = a[n - 1];

    for (i = 0; i <= j; i++)
    {
        a[i] = temp[i];
    }

    return j;
}
int main()
{

    int a[] = {100, 4, 200, 1, 3, 2};

    int i;
    int n = sizeof(a) / sizeof(a[0]);
    int count = 0;
    int maximum = -100;

    sort(a, n);
    n = removeDuplicates(a, n) + 1;

    for (i = 0; i <= n - 2; i++)
    {

        if ((a[i + 1] - a[i]) == 1 || (a[i + 1] - a[i]) == -1)
        {
            cout << a[i + 1] << " " << a[i] << "pairs " << endl;
            count++;
        }

        else
        {
            maximum = max(count, maximum);
            count = 0;
        }
    }

    if (maximum == -100)
        maximum = count;

    cout << maximum + 1;
}
