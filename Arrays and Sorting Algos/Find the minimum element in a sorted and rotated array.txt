Find the minimum element in a sorted and rotated array

https://www.youtube.com/watch?v=Kcj2NGnuSNg
int main()
{

    int a[] = {5, 1, 2, 3, 4};
    int n = sizeof(a) / sizeof(a[0]);

    int low = 0;
    int high = n - 1;
    int mid;

    if (a[low] <= a[high])
    {
        cout << a[0];
        return 0;
    }

    while (low <= high)
    {

        mid = (low + high) / 2;
        if (a[mid] > a[mid + 1])
        {
            cout << a[mid + 1];
            return 0;
        }

        else if (a[mid] < a[mid - 1])
        {
            cout << a[mid];
            return 0;
        }

        else if (a[low] <= a[mid])
        {
            low = mid + 1;
        }

        else if (a[mid] <= a[high])
        {
            high = mid - 1;
        }
    }
}




//////////////////// RECURSIVE APPRAOCH 


int findMinimum(int a[], int low, int high)
{
    int mid = (low + high) / 2;
    if (a[low] <= a[high])
        return a[low];

    else if (a[mid] > a[mid + 1])
        return a[mid + 1];

    else if (a[mid] < a[mid - 1])
        return a[mid];

    else if (a[low] <= a[mid])
    {
        return findMinimum(a, mid + 1, high);
    }

    else
    {
        return findMinimum(a, low, mid - 1);
    }
}

int main()
{

    int a[] = {5, 1, 2, 3, 4};
    int n = sizeof(a) / sizeof(a[0]);

    int low = 0;
    int high = n - 1;
   
    cout << findMinimum(a, low, high);
}

