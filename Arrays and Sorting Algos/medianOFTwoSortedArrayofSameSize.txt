https://codeshare.io/pqAMQX
////

#include <iostream>

using namespace std;

int max(int a[])
{
    if( a[0] > a[1])
    return a[0];
    
    else 
    return a[1];
    
}
int min(int a[])
{
     if( a[0] < a[1])
    return a[0];
    
    else 
    return a[1];
    
}



    int getMedian(int a[] , int n)
    {
        if( n % 2 == 0)  // if array is eve
        {
            return (a[n/2 -1] + a[n/2]) /2;
        }
        else 
        
        {
            return (a[n/2]);
        }
    }


int medianOfTwoSortedArrayOfSameSize(int a[] , int b[] , int n)
{
    
    if(n <= 0)
    {
        return -1;
    }
    
    if(n == 1)
    {
        return (a[0] + b[0]) /2;
    }
    
    if( n == 2)
    {
      return (max(a) + min(b)) /2 ;
    }
    
    
    
    
    
    int m1 =  getMedian(a,n);
    int m2 = getMedian(b,n);

    
    if(m1 == m2)
    {
              return m1;
    }
    
    else if (m1 < m2)
    {
        if(n%2 ==0)   // if n is even
        {
            return medianOfTwoSortedArrayOfSameSize(a +  n/2 - 1,b , n - n/2 + 1);
        }
        else if (n%2 != 0) // if n is odd
        {
            return medianOfTwoSortedArrayOfSameSize(a + n/2 , b ,n - n/2);
        }
        
    }
    
    else 
    {
        if(n % 2 == 0)  // if n is even
        {
            return medianOfTwoSortedArrayOfSameSize(b + n/2 - 1, a , n- n/2 +1);
        }
        
        
        else if(n%2 != 0) // if n is odd
        {
            return medianOfTwoSortedArrayOfSameSize( b + n/2 , a , n -n /2);
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}

int main()
{
   
   
      int a[] = {1, 12, 15, 26, 38};
      
int b[] = {2, 13, 17, 30, 45};

  int n = sizeof(a)/sizeof(a[0]);
  
  cout << medianOfTwoSortedArrayOfSameSize(a,b,n);





}