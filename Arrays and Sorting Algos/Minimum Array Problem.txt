Problem Statement
Given an array/list of size ‘N’ and a positive integer ‘K’. You can pick any subset of ‘K’ numbers from the array/list. The task is to find the minimum possible difference between the maximum and the minimum value in the subset.
For example :

Consider an array of size six. The elements of the array are { 6, 4, 3, 5, 5, 1 }, and the value of ‘K’ is 3. 
If we select {1, 3, 6}, the output will be the difference of the maximum of (1, 3, 6) and the minimum of (1,3, 6), i.e. 5. 
If we select {4, 5, 5}, the output will be the difference of the maximum of (4, 5,  5) and the minimum of (4, 5, 5), i.e. 1.
Among all such possible values, 1 is the minimum, and hence, it is the correct output.

Input Format :

The first line of input contains an integer T, denoting the number of test cases.

The first line of every test case contains two integers ‘N’ and ‘K’ denoting the size of the array/list and the number of elements in the subset, respectively. 

The second line of every test case contains ‘N’ space-separated integers.

Output Format :

For every test case, return the minimum possible difference between the maximum and the minimum value in the subset of size ‘K’. 

The output of each test case is printed in a separate line.

Note :

You don’t have to print anything; it has already been taken care of. Just implement the function. 

Constraints :

1 <= T <= 5    
1 <= K <= 100
K <= N <= 100
-10^5 <= ARR[i] <= 10^5

Time Limit: 1 sec 

Sample Input 1 :

1 
5 2
1 3 5 4 4

Sample Output 1 :

0

Explanation of sample input 1:

For the array {1, 3, 5, 4, 4}, all the unique subsets of K size are (1, 3), (1, 5), (1, 4), (3, 5), (3, 4), (5, 4), (4, 4). 
The minimum value of the difference between the maximum and the minimum of any subset is 0. Thus, 0 is the answer. 

2
10 3 
4 5 2 9 8 1 1 7 10 3
7 7 
7 5 3 2 1 6 6 

Sample Output 2 :

1
6

Explanation of sample input 2:

Test case 1: 
If we consider the subset { 2, 1, 1 }, we will get the minimum required value.

Test case 2: 
The value of K is equal to N. Thus; we have to consider the complete array as the subset. 

Sample Input 2 :
/////////////////////////////////// SOLUTION

#include <iostream>
#include <math.h>
using namespace std;

void sort(int a[], int n)
{
    int i, j, temp;

    if (n == 0)
        return;

    sort(a + 1, n - 1);

    if (a[0] > a[1])
    {
        temp = a[0];
        a[0] = a[1];
        a[1] = temp;

        sort(a, n);
    }
}

int main()
{

    int a[] = {7 ,5, 3, 2, 1, 6, 6 };
    int n = sizeof(a) / sizeof(a[0]);
    int min = 0;
    int i, j;
    int k;
    cin >> k;

    if (k == n)
    {
        sort(a, n);
        cout << a[1] - a[0];
        return 0;
    }

    for (i = 0; i < n; i++)
    {
        for (j = i + 1; j < n; j++)
        {

if(k==2){
            if (a[i] == a[j])
            {
                cout << a[i] << a[j] << endl;
                cout << 0;
                return 0;
            }
}
        }
    }

    sort(a, n);
    cout << a[1] - a[0];
}








