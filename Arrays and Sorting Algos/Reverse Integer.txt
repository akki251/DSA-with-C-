7. Reverse Integer
Easy

Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321

Example 2:

Input: x = -123
Output: -321

Example 3:

Input: x = 120
Output: 21

Example 4:

Input: x = 0
Output: 0

 

///////////////// SOLUTON



#include <iostream>
#include <math.h>
using namespace std;

int digits(int n)
{

   int count = 0;
   while (n != 0)
   {
      n = n / 10;
      count++;
   }

   return count;
}

int power(int n , int x)
{
int product  = 1;
     while(x!=0)
     {
 product  = product * n;
x--;
     }

     return product;
}




int main()
{

   int n;

   cin >> n;

   int digitCount = digits(n)- 1;

   int reverseNumber = 0;
   
   while (n != 0)
   {
    

      int powers =  power(10, digitCount);
      int remainder = n % 10;
      reverseNumber = reverseNumber + remainder * powers;
     
      n = n / 10;

      digitCount--;
   }

   cout << reverseNumber;
}
